// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER & AUTHENTICATION
// ================================

model User {
  id            String    @id @default(cuid())
  githubId      Int?      @unique
  username      String?   @unique
  email         String?   @unique
  name          String?
  image         String?   // NextAuth standard field for avatar
  emailVerified DateTime? // NextAuth standard field for email verification
  
  // Additional GitHub-specific fields
  bio           String?
  
  // OAuth tokens
  accessToken   String?
  refreshToken  String?
  tokenExpiry   DateTime?
  
  // User preferences
  timezone      String    @default("UTC")
  emailNotifications Boolean @default(true)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // Relations
  repositories  Repository[]
  teamMembers   TeamMember[]
  notifications UserNotification[]
  activities    ActivityLog[]
  
  @@index([githubId])
  @@index([username])
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ================================
// REPOSITORY & TEAM
// ================================

model Repository {
  id              String    @id @default(cuid())
  githubId        Int       @unique
  owner           String
  name            String
  fullName        String    @unique // "owner/repo"
  description     String?
  
  // Repository metadata
  isPrivate       Boolean   @default(false)
  defaultBranch   String    @default("main")
  language        String?
  stars           Int       @default(0)
  forks           Int       @default(0)
  
  // Monitoring settings
  isActive        Boolean   @default(true)
  webhookUrl      String?
  webhookSecret   String?
  
  // AI & Automation settings
  autoLabelEnabled      Boolean @default(true)
  duplicateDetection    Boolean @default(true)
  spamDetection         Boolean @default(true)
  staleIssueThreshold   Int     @default(14) // days
  assigneeActivityThreshold Int @default(7) // days
  communityScrapingEnabled Boolean @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastSyncedAt    DateTime?
  
  // Relations
  ownerId         String
  ownerUser       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  issues          Issue[]
  pullRequests    PullRequest[]
  teamMembers     TeamMember[]
  labels          Label[]
  contributors    Contributor[]
  scraperSources  ScraperSource[]
  analytics       RepositoryAnalytics[]
  
  @@index([githubId])
  @@index([fullName])
  @@index([ownerId])
}

model TeamMember {
  id              String   @id @default(cuid())
  role            TeamRole @default(MAINTAINER)
  
  // Workload & availability
  maxReviewLoad   Int      @default(5)
  isAvailable     Boolean  @default(true)
  timezone        String?
  
  // Expertise areas (JSON array of strings)
  expertiseAreas  Json?    // ["frontend", "backend", "database"]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  assignedIssues  Issue[]  @relation("AssignedIssues")
  assignedPRs     PullRequest[] @relation("AssignedPRs")
  
  @@unique([userId, repositoryId])
  @@index([repositoryId])
}

enum TeamRole {
  OWNER
  ADMIN
  MAINTAINER
  CONTRIBUTOR
  VIEWER
}

// ================================
// ISSUES
// ================================

model Issue {
  id              String   @id @default(cuid())
  githubId        Int      @unique
  number          Int
  title           String
  body            String?  @db.Text
  state           IssueState @default(OPEN)
  
  // GitHub metadata
  githubUrl       String
  authorUsername  String
  authorAvatarUrl String?
  
  // AI Classification
  issueType       IssueType?
  priority        Priority?
  difficulty      Difficulty?
  aiConfidence    Float?   // 0-1 confidence score
  
  // Completeness check
  hasReproSteps   Boolean  @default(false)
  hasExpected     Boolean  @default(false)
  hasEnvironment  Boolean  @default(false)
  completenessScore Float  @default(0) // 0-100
  
  // Assignment tracking
  isAssigned      Boolean  @default(false)
  assignedAt      DateTime?
  lastAssigneeActivity DateTime?
  isStaleAssignment Boolean @default(false)
  activityScore   Float    @default(0) // 0-100
  
  // Duplicate detection
  isDuplicate     Boolean  @default(false)
  duplicateOfId   String?
  similarityScore Float?
  
  // Community sourced
  isCommunitySourced Boolean @default(false)
  sourceType      SourceType?
  sourceUrl       String?
  
  // Metrics
  commentCount    Int      @default(0)
  reactionCount   Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  closedAt        DateTime?
  
  // Relations
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  assigneeId      String?
  assignee        TeamMember? @relation("AssignedIssues", fields: [assigneeId], references: [id])
  
  labels          IssueLabel[]
  duplicates      Issue[]   @relation("DuplicateIssues")
  duplicateOf     Issue?    @relation("DuplicateIssues", fields: [duplicateOfId], references: [id])
  comments        IssueComment[]
  activities      IssueActivity[]
  sentimentAnalysis IssueSentiment?
  
  @@unique([repositoryId, number])
  @@index([githubId])
  @@index([repositoryId, state])
  @@index([isStaleAssignment])
  @@index([isCommunitySourced])
}

enum IssueState {
  OPEN
  CLOSED
  IN_PROGRESS
}

enum IssueType {
  BUG
  FEATURE
  DOCUMENTATION
  QUESTION
  ENHANCEMENT
  PERFORMANCE
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SourceType {
  REDDIT
  STACKOVERFLOW
  DISCORD
  TWITTER
  HACKERNEWS
  DEVTO
}

model IssueActivity {
  id              String   @id @default(cuid())
  activityType    ActivityType
  metadata        Json?    // Flexible metadata storage
  
  createdAt       DateTime @default(now())
  
  // Relations
  issueId         String
  issue           Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  @@index([issueId, createdAt])
}

enum ActivityType {
  CREATED
  ASSIGNED
  UNASSIGNED
  LABELED
  UNLABELED
  COMMENTED
  CLOSED
  REOPENED
  REFERENCED
  COMMIT_LINKED
  PR_LINKED
}

model IssueComment {
  id              String   @id @default(cuid())
  githubId        Int      @unique
  body            String   @db.Text
  authorUsername  String
  isFromAssignee  Boolean  @default(false)
  
  // Sentiment analysis
  sentiment       Sentiment?
  sentimentScore  Float?   // -1 to 1
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  issueId         String
  issue           Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  @@index([issueId])
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
  TOXIC
}

model IssueSentiment {
  id              String   @id @default(cuid())
  overallSentiment Sentiment @default(NEUTRAL)
  averageScore    Float    @default(0) // -1 to 1
  toxicComments   Int      @default(0)
  positiveComments Int     @default(0)
  
  updatedAt       DateTime @updatedAt
  
  // Relations
  issueId         String   @unique
  issue           Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

// ================================
// PULL REQUESTS
// ================================

model PullRequest {
  id              String   @id @default(cuid())
  githubId        Int      @unique
  number          Int
  title           String
  body            String?  @db.Text
  state           PRState  @default(OPEN)
  
  // GitHub metadata
  githubUrl       String
  authorUsername  String
  authorAvatarUrl String?
  sourceBranch    String
  targetBranch    String
  
  // PR analysis
  isFirstTimeContributor Boolean @default(false)
  isSpam          Boolean  @default(false)
  isLowQuality    Boolean  @default(false)
  qualityScore    Float    @default(0) // 0-100
  
  // Review metrics
  reviewCount     Int      @default(0)
  approvalCount   Int      @default(0)
  changeRequestCount Int   @default(0)
  
  // Code metrics
  additions       Int      @default(0)
  deletions       Int      @default(0)
  changedFiles    Int      @default(0)
  
  isDraft         Boolean  @default(false)
  isMergeable     Boolean  @default(false)
  mergedAt        DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  closedAt        DateTime?
  
  // Relations
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  assigneeId      String?
  assignee        TeamMember? @relation("AssignedPRs", fields: [assigneeId], references: [id])
  
  labels          PRLabel[]
  reviews         PRReview[]
  
  @@unique([repositoryId, number])
  @@index([githubId])
  @@index([repositoryId, state])
  @@index([isSpam])
  @@index([isFirstTimeContributor])
}

enum PRState {
  OPEN
  CLOSED
  MERGED
  DRAFT
}

model PRReview {
  id              String   @id @default(cuid())
  githubId        Int      @unique
  state           ReviewState
  reviewerUsername String
  body            String?  @db.Text
  
  submittedAt     DateTime
  
  // Relations
  pullRequestId   String
  pullRequest     PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  
  @@index([pullRequestId])
}

enum ReviewState {
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
}

// ================================
// LABELS
// ================================

model Label {
  id              String   @id @default(cuid())
  githubId        Int?     @unique
  name            String
  color           String
  description     String?
  
  // Auto-labeling
  isAutoGenerated Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  
  // Relations
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  issues          IssueLabel[]
  pullRequests    PRLabel[]
  
  @@unique([repositoryId, name])
  @@index([repositoryId])
}

model IssueLabel {
  id              String   @id @default(cuid())
  appliedAt       DateTime @default(now())
  appliedBy       String?  // "AI" or username
  
  // Relations
  issueId         String
  issue           Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  labelId         String
  label           Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  
  @@unique([issueId, labelId])
  @@index([issueId])
  @@index([labelId])
}

model PRLabel {
  id              String   @id @default(cuid())
  appliedAt       DateTime @default(now())
  
  // Relations
  pullRequestId   String
  pullRequest     PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  labelId         String
  label           Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  
  @@unique([pullRequestId, labelId])
  @@index([pullRequestId])
  @@index([labelId])
}

// ================================
// CONTRIBUTORS
// ================================

model Contributor {
  id              String   @id @default(cuid())
  username        String
  avatarUrl       String?
  
  // Contribution metrics
  totalContributions Int   @default(0)
  issuesCreated   Int      @default(0)
  prsCreated      Int      @default(0)
  commitsCount    Int      @default(0)
  
  isFirstTime     Boolean  @default(true)
  lastContribution DateTime?
  
  // Health metrics
  retentionScore  Float    @default(0) // 0-100
  engagementScore Float    @default(0) // 0-100
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  achievements    ContributorAchievement[]
  
  @@unique([repositoryId, username])
  @@index([repositoryId])
  @@index([username])
}

model ContributorAchievement {
  id              String   @id @default(cuid())
  achievementType AchievementType
  title           String
  description     String?
  earnedAt        DateTime @default(now())
  
  // Relations
  contributorId   String
  contributor     Contributor @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  
  @@index([contributorId])
}

enum AchievementType {
  FIRST_CONTRIBUTION
  TEN_CONTRIBUTIONS
  FIFTY_CONTRIBUTIONS
  HUNDRED_CONTRIBUTIONS
  FIRST_PR_MERGED
  BUG_HUNTER
  FEATURE_CREATOR
  DOCUMENTATION_HERO
  CODE_REVIEWER
}

// ================================
// COMMUNITY SCRAPING
// ================================

model ScraperSource {
  id              String   @id @default(cuid())
  sourceType      SourceType
  
  // Source configuration
  url             String?  // For Reddit subreddit, SO tags, etc.
  keywords        Json?    // Array of keywords to monitor
  isActive        Boolean  @default(true)
  
  // Scraping frequency
  lastScrapedAt   DateTime?
  scrapeInterval  Int      @default(60) // minutes
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  scrapedContent  ScrapedContent[]
  
  @@index([repositoryId])
  @@index([sourceType])
}

model ScrapedContent {
  id              String   @id @default(cuid())
  title           String
  content         String   @db.Text
  url             String   @unique
  
  // AI analysis
  isPotentialBug  Boolean  @default(false)
  confidenceScore Float?
  suggestedType   IssueType?
  suggestedPriority Priority?
  
  // Processing status
  status          ScrapedStatus @default(PENDING)
  processedAt     DateTime?
  
  // Issue creation
  createdIssueId  String?
  
  scrapedAt       DateTime @default(now())
  
  // Relations
  sourceId        String
  source          ScraperSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  @@index([sourceId])
  @@index([status])
}

enum ScrapedStatus {
  PENDING
  REVIEWED
  ISSUE_CREATED
  DISMISSED
}

// ================================
// AI AUTO-SCRAPER SYSTEM
// ================================

model ScrapedPost {
  id              String   @id @default(cuid())
  source          String   // "reddit", "stackoverflow", "twitter", "github_issues"
  sourceUrl       String   @unique
  sourceId        String?  // Platform-specific ID
  
  // Content
  title           String
  content         String   @db.Text
  contentHtml     String?  @db.Text  // Store raw HTML for re-processing
  author          String?
  authorUrl       String?
  
  // Metadata
  upvotes         Int?
  commentCount    Int?
  tags            String[]
  postedAt        DateTime?
  scrapedAt       DateTime @default(now())
  
  // Repository-specific scraping
  targetRepository String? // "owner/repo" - which repo this was scraped for
  scrapeKeywords  String[] // Keywords used for this scrape
  
  // Processing status
  processed       Boolean  @default(false)
  processingError String?  @db.Text
  retryCount      Int      @default(0)
  
  // Relations
  processedIssue  ProcessedIssue?
  
  @@index([source, processed])
  @@index([scrapedAt])
  @@index([sourceId])
  @@index([targetRepository])
}

model ProcessedIssue {
  id              String   @id @default(cuid())
  scrapedPostId   String   @unique
  scrapedPost     ScrapedPost @relation(fields: [scrapedPostId], references: [id], onDelete: Cascade)
  
  // AI Classification
  type            String   // "bug", "feature_request", "question", "documentation"
  confidence      Float    // 0.0 to 1.0
  summary         String   @db.Text
  technicalDetails String? @db.Text
  severity        String   // "critical", "high", "medium", "low", "info"
  suggestedLabels String[]
  affectedArea    String?  // "ui", "api", "database", "auth", etc.
  
  // AI Context
  aiModel         String   @default("gpt-4o-mini")
  aiTokensUsed    Int?
  aiPromptVersion String   @default("v1")
  
  // Duplication Detection
  isDuplicate     Boolean  @default(false)
  duplicateOfId   String?
  duplicateScore  Float?   // Similarity score 0.0-1.0
  embedding       String?  @db.Text // JSON array of embedding vector
  
  // GitHub Integration
  githubIssueId   Int?     @unique
  githubUrl       String?
  githubLabels    String[]
  
  // Workflow
  status          String   @default("pending") 
  // "pending", "approved", "rejected", "duplicate", "synced_to_github"
  reviewedAt      DateTime?
  reviewedBy      String?
  
  // Analytics
  userImpact      Int?     // Estimated # of affected users
  sentimentScore  Float?   // -1.0 (negative) to 1.0 (positive)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([type, severity])
  @@index([isDuplicate])
  @@index([createdAt])
}

model ScraperRun {
  id          String   @id @default(cuid())
  source      String
  status      String   // "running", "success", "failed"
  itemsFound  Int      @default(0)
  itemsNew    Int      @default(0)
  itemsFailed Int      @default(0)
  duration    Int?     // milliseconds
  error       String?  @db.Text
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  @@index([source, startedAt])
}

model FeedbackLoop {
  id              String   @id @default(cuid())
  processedIssueId String
  feedbackType    String   // "correct", "incorrect", "duplicate_missed", "severity_wrong"
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  
  @@index([processedIssueId])
}

// ================================
// ANALYTICS
// ================================

model RepositoryAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @default(now()) @db.Date
  
  // Issue metrics
  openIssues      Int      @default(0)
  closedIssues    Int      @default(0)
  avgCloseTime    Float?   // hours
  
  // PR metrics
  openPRs         Int      @default(0)
  mergedPRs       Int      @default(0)
  avgMergeTime    Float?   // hours
  
  // Contributor metrics
  activeContributors Int   @default(0)
  newContributors Int      @default(0)
  
  // Community health
  sentimentScore  Float?   // -1 to 1
  responseTime    Float?   // hours
  
  createdAt       DateTime @default(now())
  
  // Relations
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@unique([repositoryId, date])
  @@index([repositoryId, date])
}

// ================================
// NOTIFICATIONS
// ================================

model UserNotification {
  id              String   @id @default(cuid())
  type            NotificationType
  title           String
  message         String   @db.Text
  
  // Notification metadata
  metadata        Json?
  priority        NotificationPriority @default(NORMAL)
  
  isRead          Boolean  @default(false)
  readAt          DateTime?
  
  createdAt       DateTime @default(now())
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([createdAt])
}

enum NotificationType {
  STALE_ASSIGNMENT
  NEW_ISSUE
  NEW_PR
  REVIEW_REQUESTED
  DUPLICATE_DETECTED
  SPAM_DETECTED
  COMMUNITY_BUG
  TOXIC_COMMENT
  MILESTONE_REACHED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ================================
// ACTIVITY LOGS
// ================================

model ActivityLog {
  id              String   @id @default(cuid())
  action          String
  entityType      String   // "Issue", "PR", "Repository", etc.
  entityId        String?
  
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  
  createdAt       DateTime @default(now())
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}
