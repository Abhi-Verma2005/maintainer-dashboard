generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  githubId      Int?      @unique
  username      String?   @unique
  email         String?   @unique
  name          String?
  image         String?   // NextAuth standard field for avatar
  emailVerified DateTime? // NextAuth standard field for email verification
  
  // Additional GitHub-specific fields
  bio           String?
  
  // OAuth tokens
  accessToken   String?
  refreshToken  String?
  tokenExpiry   DateTime?
  
  // User preferences
  timezone      String    @default("UTC")
  emailNotifications Boolean @default(true)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // Relations
  repositories  Repository[]
  teamMembers   TeamMember[]
  notifications UserNotification[]
  activities    ActivityLog[]
  createdTemplates CompletenessTemplate[] @relation("TemplateCreator")
  id                   String                 @id @default(cuid())
  githubId             Int?                   @unique
  username             String?                @unique
  email                String?                @unique
  name                 String?
  bio                  String?
  accessToken          String?
  refreshToken         String?
  tokenExpiry          DateTime?
  timezone             String                 @default("UTC")
  emailNotifications   Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  lastLoginAt          DateTime?
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  activities           ActivityLog[]
  CompletenessTemplate CompletenessTemplate[]
  repositories         Repository[]
  sessions             Session[]
  teamMembers          TeamMember[]
  notifications        UserNotification[]

  @@index([githubId])
  @@index([username])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repository {
  id              String    @id @default(cuid())
  githubId        Int       @unique
  owner           String
  name            String
  fullName        String    @unique // "owner/repo"
  description     String?
  
  // Repository metadata
  isPrivate       Boolean   @default(false)
  defaultBranch   String    @default("main")
  language        String?
  stars           Int       @default(0)
  forks           Int       @default(0)
  
  // Monitoring settings
  isActive        Boolean   @default(true)
  webhookUrl      String?
  webhookSecret   String?
  
  // AI & Automation settings
  autoLabelEnabled      Boolean @default(true)
  duplicateDetection    Boolean @default(true)
  spamDetection         Boolean @default(true)
  staleIssueThreshold   Int     @default(14) // days
  assigneeActivityThreshold Int @default(7) // days
  communityScrapingEnabled Boolean @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastSyncedAt    DateTime?
  
  // Relations
  ownerId         String
  ownerUser       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  issues          Issue[]
  pullRequests    PullRequest[]
  teamMembers     TeamMember[]
  labels          Label[]
  contributors    Contributor[]
  scraperSources  ScraperSource[]
  analytics       RepositoryAnalytics[]
  completenessTemplates     CompletenessTemplate[] @relation("CompletenessTemplates")
  pendingComments           PendingComment[] @relation("PendingComments")
  completenessAnalyses      CompletenessAnalysis[] @relation("CompletenessAnalyses")
  completenessMetrics       CompletenessMetrics[] @relation("CompletenessMetrics")
  id                        String                 @id @default(cuid())
  githubId                  Int                    @unique
  owner                     String
  name                      String
  fullName                  String                 @unique
  description               String?
  isPrivate                 Boolean                @default(false)
  defaultBranch             String                 @default("main")
  language                  String?
  stars                     Int                    @default(0)
  forks                     Int                    @default(0)
  isActive                  Boolean                @default(true)
  webhookUrl                String?
  webhookSecret             String?
  autoLabelEnabled          Boolean                @default(true)
  duplicateDetection        Boolean                @default(true)
  spamDetection             Boolean                @default(true)
  staleIssueThreshold       Int                    @default(14)
  assigneeActivityThreshold Int                    @default(7)
  communityScrapingEnabled  Boolean                @default(false)
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  lastSyncedAt              DateTime?
  ownerId                   String
  CompletenessTemplate      CompletenessTemplate[]
  contributors              Contributor[]
  issues                    Issue[]
  labels                    Label[]
  PendingComment            PendingComment[]
  pullRequests              PullRequest[]
  ownerUser                 User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  analytics                 RepositoryAnalytics[]
  scraperSources            ScraperSource[]
  teamMembers               TeamMember[]

  @@index([githubId])
  @@index([fullName])
  @@index([ownerId])
}

model TeamMember {
  id             String        @id @default(cuid())
  role           TeamRole      @default(MAINTAINER)
  maxReviewLoad  Int           @default(5)
  isAvailable    Boolean       @default(true)
  timezone       String?
  expertiseAreas Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  repositoryId   String
  assignedIssues Issue[]       @relation("AssignedIssues")
  assignedPRs    PullRequest[] @relation("AssignedPRs")
  repository     Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@index([repositoryId])
}

model Issue {
  id                   String          @id @default(cuid())
  githubId             Int             @unique
  number               Int
  title                String
  body                 String?
  state                IssueState      @default(OPEN)
  githubUrl            String
  authorUsername       String
  authorAvatarUrl      String?
  issueType            IssueType?
  priority             Priority?
  difficulty           Difficulty?
  aiConfidence         Float?
  hasReproSteps        Boolean         @default(false)
  hasExpected          Boolean         @default(false)
  hasEnvironment       Boolean         @default(false)
  completenessScore    Float           @default(0)
  isAssigned           Boolean         @default(false)
  assignedAt           DateTime?
  lastAssigneeActivity DateTime?
  isStaleAssignment    Boolean         @default(false)
  activityScore        Float           @default(0)
  isDuplicate          Boolean         @default(false)
  duplicateOfId        String?
  similarityScore      Float?
  isCommunitySourced   Boolean         @default(false)
  sourceType           SourceType?
  sourceUrl            String?
  commentCount         Int             @default(0)
  reactionCount        Int             @default(0)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  closedAt             DateTime?
  repositoryId         String
  assigneeId           String?
  assignee             TeamMember?     @relation("AssignedIssues", fields: [assigneeId], references: [id])
  duplicateOf          Issue?          @relation("DuplicateIssues", fields: [duplicateOfId], references: [id])
  duplicates           Issue[]         @relation("DuplicateIssues")
  repository           Repository      @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  activities           IssueActivity[]
  comments             IssueComment[]
  labels               IssueLabel[]
  sentimentAnalysis    IssueSentiment?

  @@unique([repositoryId, number])
  @@index([githubId])
  @@index([repositoryId, state])
  @@index([isStaleAssignment])
  @@index([isCommunitySourced])
}

model IssueActivity {
  id           String       @id @default(cuid())
  activityType ActivityType
  metadata     Json?
  createdAt    DateTime     @default(now())
  issueId      String
  issue        Issue        @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([issueId, createdAt])
}

model IssueComment {
  id             String     @id @default(cuid())
  githubId       Int        @unique
  body           String
  authorUsername String
  isFromAssignee Boolean    @default(false)
  sentiment      Sentiment?
  sentimentScore Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  issueId        String
  issue          Issue      @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([issueId])
}

model IssueSentiment {
  id               String    @id @default(cuid())
  overallSentiment Sentiment @default(NEUTRAL)
  averageScore     Float     @default(0)
  toxicComments    Int       @default(0)
  positiveComments Int       @default(0)
  updatedAt        DateTime  @updatedAt
  issueId          String    @unique
  issue            Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model PullRequest {
  id                     String      @id @default(cuid())
  githubId               Int         @unique
  number                 Int
  title                  String
  body                   String?
  state                  PRState     @default(OPEN)
  githubUrl              String
  authorUsername         String
  authorAvatarUrl        String?
  sourceBranch           String
  targetBranch           String
  isFirstTimeContributor Boolean     @default(false)
  isSpam                 Boolean     @default(false)
  isLowQuality           Boolean     @default(false)
  qualityScore           Float       @default(0)
  reviewCount            Int         @default(0)
  approvalCount          Int         @default(0)
  changeRequestCount     Int         @default(0)
  additions              Int         @default(0)
  deletions              Int         @default(0)
  changedFiles           Int         @default(0)
  isDraft                Boolean     @default(false)
  isMergeable            Boolean     @default(false)
  mergedAt               DateTime?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  closedAt               DateTime?
  repositoryId           String
  assigneeId             String?
  labels                 PRLabel[]
  reviews                PRReview[]
  assignee               TeamMember? @relation("AssignedPRs", fields: [assigneeId], references: [id])
  repository             Repository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, number])
  @@index([githubId])
  @@index([repositoryId, state])
  @@index([isSpam])
  @@index([isFirstTimeContributor])
}

model PRReview {
  id               String      @id @default(cuid())
  githubId         Int         @unique
  state            ReviewState
  reviewerUsername String
  body             String?
  submittedAt      DateTime
  pullRequestId    String
  pullRequest      PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)

  @@index([pullRequestId])
}

model Label {
  id              String       @id @default(cuid())
  githubId        Int?         @unique
  name            String
  color           String
  description     String?
  isAutoGenerated Boolean      @default(false)
  createdAt       DateTime     @default(now())
  repositoryId    String
  issues          IssueLabel[]
  repository      Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  pullRequests    PRLabel[]

  @@unique([repositoryId, name])
  @@index([repositoryId])
}

model IssueLabel {
  id        String   @id @default(cuid())
  appliedAt DateTime @default(now())
  appliedBy String?
  issueId   String
  labelId   String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([issueId, labelId])
  @@index([issueId])
  @@index([labelId])
}

model PRLabel {
  id            String      @id @default(cuid())
  appliedAt     DateTime    @default(now())
  pullRequestId String
  labelId       String
  label         Label       @relation(fields: [labelId], references: [id], onDelete: Cascade)
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)

  @@unique([pullRequestId, labelId])
  @@index([pullRequestId])
  @@index([labelId])
}

model Contributor {
  id                 String                   @id @default(cuid())
  username           String
  avatarUrl          String?
  totalContributions Int                      @default(0)
  issuesCreated      Int                      @default(0)
  prsCreated         Int                      @default(0)
  commitsCount       Int                      @default(0)
  isFirstTime        Boolean                  @default(true)
  lastContribution   DateTime?
  retentionScore     Float                    @default(0)
  engagementScore    Float                    @default(0)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  repositoryId       String
  repository         Repository               @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  achievements       ContributorAchievement[]

  @@unique([repositoryId, username])
  @@index([repositoryId])
  @@index([username])
}

model ContributorAchievement {
  id              String          @id @default(cuid())
  achievementType AchievementType
  title           String
  description     String?
  earnedAt        DateTime        @default(now())
  contributorId   String
  contributor     Contributor     @relation(fields: [contributorId], references: [id], onDelete: Cascade)

  @@index([contributorId])
}

model ScraperSource {
  id             String           @id @default(cuid())
  sourceType     SourceType
  url            String?
  keywords       Json?
  isActive       Boolean          @default(true)
  lastScrapedAt  DateTime?
  scrapeInterval Int              @default(60)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  repositoryId   String
  scrapedContent ScrapedContent[]
  repository     Repository       @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([repositoryId])
  @@index([sourceType])
}

model ScrapedContent {
  id                String        @id @default(cuid())
  title             String
  content           String
  url               String        @unique
  isPotentialBug    Boolean       @default(false)
  confidenceScore   Float?
  suggestedType     IssueType?
  suggestedPriority Priority?
  status            ScrapedStatus @default(PENDING)
  processedAt       DateTime?
  createdIssueId    String?
  scrapedAt         DateTime      @default(now())
  sourceId          String
  source            ScraperSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId])
  @@index([status])
}

model RepositoryAnalytics {
  id                 String     @id @default(cuid())
  date               DateTime   @default(now()) @db.Date
  openIssues         Int        @default(0)
  closedIssues       Int        @default(0)
  avgCloseTime       Float?
  openPRs            Int        @default(0)
  mergedPRs          Int        @default(0)
  avgMergeTime       Float?
  activeContributors Int        @default(0)
  newContributors    Int        @default(0)
  sentimentScore     Float?
  responseTime       Float?
  createdAt          DateTime   @default(now())
  repositoryId       String
  repository         Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, date])
  @@index([repositoryId, date])
}

model UserNotification {
  id        String               @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  metadata  Json?
  priority  NotificationPriority @default(NORMAL)
  isRead    Boolean              @default(false)
  readAt    DateTime?
  createdAt DateTime             @default(now())
  userId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

model ActivityLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

model CompletenessTemplate {
  id               String           @id
  name             String
  description      String?
  category         TemplateCategory
  template         Json
  variables        Json
  styling          Json
  isActive         Boolean          @default(true)
  isDefault        Boolean          @default(false)
  requiresApproval Boolean          @default(true)
  autoApply        Boolean          @default(false)
  usageCount       Int              @default(0)
  lastUsed         DateTime?
  conditions       Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  repositoryId     String?
  createdById      String
  User             User             @relation(fields: [createdById], references: [id])
  Repository       Repository?      @relation(fields: [repositoryId], references: [id])
  PendingComment   PendingComment[]

  @@index([createdById])
  @@index([repositoryId, isActive])
}

model FeedbackLoop {
  id               String   @id
  processedIssueId String
  feedbackType     String
  notes            String?
  createdAt        DateTime @default(now())

  @@index([processedIssueId])
}

model PendingComment {
  id                   String               @id
  issueNumber          Int
  issueTitle           String
  issueUrl             String
  issueAuthor          String
  issueBody            String?
  completenessAnalysis Json
  qualityScore         Float
  missingElements      Json
  templateId           String
  generatedComment     String
  finalComment         String?
  status               ApprovalStatus       @default(PENDING)
  approvedBy           String?
  approvedAt           DateTime?
  rejectedBy           String?
  rejectedAt           DateTime?
  rejectionReason      String?
  githubCommentId      Int?                 @unique
  postedAt             DateTime?
  analysisConfidence   Float                @default(0)
  analysisVersion      String               @default("v1")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  repositoryId         String
  Repository           Repository           @relation(fields: [repositoryId], references: [id])
  CompletenessTemplate CompletenessTemplate @relation(fields: [templateId], references: [id])

  @@index([issueNumber])
  @@index([repositoryId, status])
  @@index([status, createdAt])
}

model ProcessedIssue {
  id               String      @id
  scrapedPostId    String      @unique
  type             String
  confidence       Float
  summary          String
  technicalDetails String?
  severity         String
  suggestedLabels  String[]
  affectedArea     String?
  aiModel          String      @default("gpt-4o-mini")
  aiTokensUsed     Int?
  aiPromptVersion  String      @default("v1")
  isDuplicate      Boolean     @default(false)
  duplicateOfId    String?
  duplicateScore   Float?
  embedding        String?
  githubIssueId    Int?        @unique
  githubUrl        String?
  githubLabels     String[]
  status           String      @default("pending")
  reviewedAt       DateTime?
  reviewedBy       String?
  userImpact       Int?
  sentimentScore   Float?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  ScrapedPost      ScrapedPost @relation(fields: [scrapedPostId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([isDuplicate])
  @@index([status])
  @@index([type, severity])
}

model ScrapedPost {
  id               String          @id
  source           String
  sourceUrl        String          @unique
  sourceId         String?
  title            String
  content          String
  contentHtml      String?
  author           String?
  authorUrl        String?
  upvotes          Int?
  commentCount     Int?
  tags             String[]
  postedAt         DateTime?
  scrapedAt        DateTime        @default(now())
  targetRepository String?
  scrapeKeywords   String[]
  processed        Boolean         @default(false)
  processingError  String?
  retryCount       Int             @default(0)
  ProcessedIssue   ProcessedIssue?

  @@index([scrapedAt])
  @@index([sourceId])
  @@index([source, processed])
  @@index([targetRepository])
}

model ScraperRun {
  id          String    @id
  source      String
  status      String
  itemsFound  Int       @default(0)
  itemsNew    Int       @default(0)
  itemsFailed Int       @default(0)
  duration    Int?
  error       String?
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([source, startedAt])
}

enum TeamRole {
  OWNER
  ADMIN
  MAINTAINER
  CONTRIBUTOR
  VIEWER
}

enum IssueState {
  OPEN
  CLOSED
  IN_PROGRESS
}

enum IssueType {
  BUG
  FEATURE
  DOCUMENTATION
  QUESTION
  ENHANCEMENT
  PERFORMANCE
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SourceType {
  REDDIT
  STACKOVERFLOW
  DISCORD
  TWITTER
  HACKERNEWS
  DEVTO
}

enum ActivityType {
  CREATED
  ASSIGNED
  UNASSIGNED
  LABELED
  UNLABELED
  COMMENTED
  CLOSED
  REOPENED
  REFERENCED
  COMMIT_LINKED
  PR_LINKED
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
  TOXIC
}

enum PRState {
  OPEN
  CLOSED
  MERGED
  DRAFT
}

enum ReviewState {
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
}

enum AchievementType {
  FIRST_CONTRIBUTION
  TEN_CONTRIBUTIONS
  FIFTY_CONTRIBUTIONS
  HUNDRED_CONTRIBUTIONS
  FIRST_PR_MERGED
  BUG_HUNTER
  FEATURE_CREATOR
  DOCUMENTATION_HERO
  CODE_REVIEWER
}

enum ScrapedStatus {
  PENDING
  REVIEWED
  ISSUE_CREATED
  DISMISSED
}

// ================================
// AI AUTO-SCRAPER SYSTEM
// ================================

model ScrapedPost {
  id              String   @id @default(cuid())
  source          String   // "reddit", "stackoverflow", "twitter", "github_issues"
  sourceUrl       String   @unique
  sourceId        String?  // Platform-specific ID
  
  // Content
  title           String
  content         String   @db.Text
  contentHtml     String?  @db.Text  // Store raw HTML for re-processing
  author          String?
  authorUrl       String?
  
  // Metadata
  upvotes         Int?
  commentCount    Int?
  tags            String[]
  postedAt        DateTime?
  scrapedAt       DateTime @default(now())
  
  // Repository-specific scraping
  targetRepository String? // "owner/repo" - which repo this was scraped for
  scrapeKeywords  String[] // Keywords used for this scrape
  
  // Processing status
  processed       Boolean  @default(false)
  processingError String?  @db.Text
  retryCount      Int      @default(0)
  
  // Relations
  processedIssue  ProcessedIssue?
  
  @@index([source, processed])
  @@index([scrapedAt])
  @@index([sourceId])
  @@index([targetRepository])
}

model ProcessedIssue {
  id              String   @id @default(cuid())
  scrapedPostId   String   @unique
  scrapedPost     ScrapedPost @relation(fields: [scrapedPostId], references: [id], onDelete: Cascade)
  
  // AI Classification
  type            String   // "bug", "feature_request", "question", "documentation"
  confidence      Float    // 0.0 to 1.0
  summary         String   @db.Text
  technicalDetails String? @db.Text
  severity        String   // "critical", "high", "medium", "low", "info"
  suggestedLabels String[]
  affectedArea    String?  // "ui", "api", "database", "auth", etc.
  
  // AI Context
  aiModel         String   @default("gpt-4o-mini")
  aiTokensUsed    Int?
  aiPromptVersion String   @default("v1")
  
  // Duplication Detection
  isDuplicate     Boolean  @default(false)
  duplicateOfId   String?
  duplicateScore  Float?   // Similarity score 0.0-1.0
  embedding       String?  @db.Text // JSON array of embedding vector
  
  // GitHub Integration
  githubIssueId   Int?     @unique
  githubUrl       String?
  githubLabels    String[]
  
  // Workflow
  status          String   @default("pending") 
  // "pending", "approved", "rejected", "duplicate", "synced_to_github"
  reviewedAt      DateTime?
  reviewedBy      String?
  
  // Analytics
  userImpact      Int?     // Estimated # of affected users
  sentimentScore  Float?   // -1.0 (negative) to 1.0 (positive)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([type, severity])
  @@index([isDuplicate])
  @@index([createdAt])
}

model ScraperRun {
  id          String   @id @default(cuid())
  source      String
  status      String   // "running", "success", "failed"
  itemsFound  Int      @default(0)
  itemsNew    Int      @default(0)
  itemsFailed Int      @default(0)
  duration    Int?     // milliseconds
  error       String?  @db.Text
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  @@index([source, startedAt])
}

model FeedbackLoop {
  id              String   @id @default(cuid())
  processedIssueId String
  feedbackType    String   // "correct", "incorrect", "duplicate_missed", "severity_wrong"
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  
  @@index([processedIssueId])
}

// ================================
// ANALYTICS
// ================================

model RepositoryAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @default(now()) @db.Date
  
  // Issue metrics
  openIssues      Int      @default(0)
  closedIssues    Int      @default(0)
  avgCloseTime    Float?   // hours
  
  // PR metrics
  openPRs         Int      @default(0)
  mergedPRs       Int      @default(0)
  avgMergeTime    Float?   // hours
  
  // Contributor metrics
  activeContributors Int   @default(0)
  newContributors Int      @default(0)
  
  // Community health
  sentimentScore  Float?   // -1 to 1
  responseTime    Float?   // hours
  
  createdAt       DateTime @default(now())
  
  // Relations
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@unique([repositoryId, date])
  @@index([repositoryId, date])
}

// ================================
// NOTIFICATIONS
// ================================

model UserNotification {
  id              String   @id @default(cuid())
  type            NotificationType
  title           String
  message         String   @db.Text
  
  // Notification metadata
  metadata        Json?
  priority        NotificationPriority @default(NORMAL)
  
  isRead          Boolean  @default(false)
  readAt          DateTime?
  
  createdAt       DateTime @default(now())
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([createdAt])
}

enum NotificationType {
  STALE_ASSIGNMENT
  NEW_ISSUE
  NEW_PR
  REVIEW_REQUESTED
  DUPLICATE_DETECTED
  SPAM_DETECTED
  COMMUNITY_BUG
  TOXIC_COMMENT
  MILESTONE_REACHED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  POSTED
  FAILED
  EXPIRED
}

enum TemplateCategory {
  BUG_REPORT
  FEATURE_REQUEST
  QUESTION
  DOCUMENTATION
  PERFORMANCE_ISSUE
  SECURITY_ISSUE
  CUSTOM
}

// ================================
// ISSUE COMPLETENESS CHECKER
// ================================

model CompletenessTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  category        TemplateCategory
  template        Json     // Rich template structure with variables
  variables       Json     // Available template variables
  styling         Json     // UI styling preferences
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false)
  
  // Approval settings
  requiresApproval Boolean @default(true)
  autoApply       Boolean  @default(false)
  
  // Usage tracking
  usageCount      Int      @default(0)
  lastUsed        DateTime?
  
  // Template conditions
  conditions      Json?    // When to apply this template
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  repositoryId    String?
  repository      Repository? @relation("CompletenessTemplates", fields: [repositoryId], references: [id])
  createdById     String
  createdBy       User     @relation("TemplateCreator", fields: [createdById], references: [id])
  
  pendingComments PendingComment[]
  
  @@index([repositoryId, isActive])
  @@index([createdById])
}

model PendingComment {
  id              String   @id @default(cuid())
  
  // Issue information
  issueNumber     Int
  issueTitle      String
  issueUrl        String
  issueAuthor     String
  issueBody       String?  @db.Text
  
  // Completeness analysis
  completenessAnalysis Json
  qualityScore    Float
  missingElements Json
  
  // Template and comment
  templateId      String
  template        CompletenessTemplate @relation(fields: [templateId], references: [id])
  generatedComment String   @db.Text
  finalComment    String?   @db.Text
  
  // Approval workflow
  status          ApprovalStatus @default(PENDING)
  approvedBy      String?
  approvedAt      DateTime?
  rejectedBy      String?
  rejectedAt      DateTime?
  rejectionReason String?   @db.Text
  
  // GitHub integration
  githubCommentId Int?      @unique
  postedAt        DateTime?
  
  // Analysis metadata
  analysisConfidence Float @default(0)
  analysisVersion   String @default("v1")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  repositoryId    String
  repository      Repository @relation("PendingComments", fields: [repositoryId], references: [id])
  
  @@index([status, createdAt])
  @@index([repositoryId, status])
  @@index([issueNumber])
}

model CompletenessAnalysis {
  id              String   @id @default(cuid())
  
  // Analysis results
  issueNumber     Int
  overallScore    Float    // 0-100
  reproductionSteps Json
  expectedBehavior Json
  versionInfo     Json
  environmentDetails Json
  errorLogs       Json
  screenshots     Json
  
  // Analysis metadata
  analysisVersion String   @default("v1")
  confidence      Float    @default(0)
  processingTime  Int?     // milliseconds
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  repositoryId    String
  repository      Repository @relation("CompletenessAnalyses", fields: [repositoryId], references: [id])
  
  @@unique([repositoryId, issueNumber])
  @@index([repositoryId, overallScore])
}

model CompletenessMetrics {
  id              String   @id @default(cuid())
  date            DateTime @default(now()) @db.Date
  
  // Repository metrics
  totalIssues     Int      @default(0)
  analyzedIssues  Int      @default(0)
  completeIssues  Int      @default(0)
  incompleteIssues Int     @default(0)
  
  // Quality metrics
  averageScore    Float    @default(0)
  medianScore     Float    @default(0)
  highQualityCount Int     @default(0) // score >= 80
  lowQualityCount  Int     @default(0) // score < 40
  
  // Completeness breakdown
  reproductionStepsPresent Int @default(0)
  expectedBehaviorPresent Int @default(0)
  versionInfoPresent      Int @default(0)
  environmentDetailsPresent Int @default(0)
  errorLogsPresent        Int @default(0)
  screenshotsPresent      Int @default(0)
  
  // Template usage
  templatesUsed   Int      @default(0)
  commentsPosted  Int      @default(0)
  approvalsPending Int     @default(0)
  
  createdAt       DateTime @default(now())
  
  // Relations
  repositoryId    String
  repository      Repository @relation("CompletenessMetrics", fields: [repositoryId], references: [id])
  
  @@unique([repositoryId, date])
  @@index([repositoryId, date])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  POSTED
  FAILED
  EXPIRED
}

enum TemplateCategory {
  BUG_REPORT
  FEATURE_REQUEST
  QUESTION
  DOCUMENTATION
  PERFORMANCE_ISSUE
  SECURITY_ISSUE
  CUSTOM
}
